	/////////////////////////////////////////////////////////////////////
	public List<ViewInfo> getCoveragePerWeek(int viewId, int subViewId, String country, String type, String viewName,
			String date) {
		QeuryBilder com = new QeuryBilder();
		String query = com.getDataPerWeek(viewId, type, viewName, date);
		return getList(new JKFinder() {
			@Override
			public void setParamters(PreparedStatement ps) throws SQLException {
				int v1 = 1;
				int v2 = 2;
				int v3 = 3;
				int v4 = 4;
				if (query.contains("?,?,?,?")) {
					for (int i = 0; i < 5; i++) {
						ps.setInt(v1, viewId);
						ps.setInt(v2, subViewId);
						ps.setString(v3, country);
						ps.setString(v4, date);
						v1 += 4;
						v2 += 4;
						v3 += 4;
						v4 += 4;
					}
				}
			}

			@Override
			public ViewInfo populate(ResultSet rs) throws SQLException {

				ViewInfo item = new ViewInfo();
				item.setType(rs.getString("Type"));
				item.setGreenExist(rs.getLong("GreenExist"));
				;
				item.setGreenNew(rs.getLong("GreenNew"));
				item.setOrangeExist(rs.getLong("OrangeExist"));
				item.setOrangeNew(rs.getLong("OrangeNew"));
				item.setRedExist(rs.getLong("RedExist"));
				item.setRedNew(rs.getLong("RedNew"));

				return item;
			}

			@Override
			public String getQuery() {
				return query;
			}
		});
	}

	/////////////////////////////////////////////////////////////////////



	///////////// count Details number per Week///////////////////
	public String getDataPerWeek(int viewID, String type, String viewName,String dateNew) {
		int start = 0;
		int end = 0;
		String date = "day";
		fillTheData(type + "-" + viewID, viewName);
		List<String> list = Arrays.asList(">", "W4", "W3", "W2", "W1");
		List<Integer> weeks = Arrays.asList(28, 21, 14, 7, 0);
		List<AllRadarData> types = new ArrayList<>();

		greenExist = setDefaultsIfNull(greenExist);
		types.add(greenExist);
		greenNew = setDefaultsIfNull(greenNew);
		types.add(greenNew);
		orangeExist = setDefaultsIfNull(orangeExist);
		types.add(orangeExist);
		orangeNew = setDefaultsIfNull(orangeNew);
		types.add(orangeNew);
		redExist = setDefaultsIfNull(redExist);
		types.add(redExist);
		redNew = setDefaultsIfNull(redNew);
		types.add(redNew);

		if (types.get(0).getColorType() == null) {
			query = "\r\n" + "select '>' as Type,   \r\n" + "0    as GreenExist ,\r\n" + "0    as GreenNew ,\r\n"
					+ "0    as OrangeExist ,\r\n" + "0    as OrangeNew ,\r\n" + "0    as RedExist ,\r\n"
					+ "0    as RedNew \r\n" + "union \r\n" + "select 'W4' as Type,\r\n" + "0  as GreenExist ,\r\n"
					+ "0  as GreenNew ,\r\n" + "0  as OrangeExist ,\r\n" + "0  as OrangeExist ,\r\n"
					+ "0  as RedExist ,\r\n" + "0  as RedNew \r\n" + "union\r\n" + "select 'W3' as Type, \r\n"
					+ "0  as GreenExist ,\r\n" + "0  as GreenNew ,\r\n" + "0  as OrangeExist ,\r\n"
					+ "0  as OrangeNew ,\r\n" + "0  as RedExist ,\r\n" + "0  as RedNew \r\n" + "union\r\n"
					+ "select 'W2' as Type, \r\n" + "0  as GreenExist,\r\n" + "0  as GreenNew ,  \r\n"
					+ "0  as OrangeExist , \r\n" + "0  as OrangeNew ,  \r\n" + "0  as RedExist ,  \r\n"
					+ "0  as RedNew\r\n" + "union\r\n" + "select 'W1' as Type,\r\n" + "0   as GreenExist ,\r\n"
					+ "0   as GreenNew , \r\n" + "0   as OrangeExist ,  \r\n" + "0   as OrangeNew , \r\n"
					+ "0   as RedExist ,  \r\n" + "0   as RedNew \r\n" + "";
		} else {

			for (int i = 0; i < list.size(); i++) {
				builder.append("select " + "'" + list.get(i) + "'" + " as Type, ");
				for (int j = 0; j < types.size(); j++) {
					if (types.get(j).getTimePeriod().equalsIgnoreCase("month")) {
						start = types.get(j).getStart() * 30;
						end = types.get(j).getEnd() * 30;
						date = "day";
					} else if (types.get(j).getTimePeriod().equalsIgnoreCase("week")) {
						start = types.get(j).getStart() * 7;
						end = types.get(j).getEnd() * 7;
						date = "day";
					} else {
						start = types.get(j).getStart();
						end = types.get(j).getEnd();
						date = types.get(j).getTimePeriod();
					}
					builder.append(" " + CommonsViewData.SUMCASE);

					if (types.get(j).getIsScanned() == -1) {
					} else {
						builder.append(" IsScanned = " + types.get(j).getIsScanned() + " and ");
					}
					if (types.get(j).getIsNew() == -1) {
					} else {
						builder.append(" IsNew = " + types.get(j).getIsNew() + " and ");
					}
					if (types.get(j).getIsComply() == -1) {
					} else {
						builder.append(" IsComply = " + types.get(j).getIsComply() + " and ");
					}
					if (types.get(j).getIsCovered() == -1) {
					} else {
						builder.append(" IsCoveredByControl = " + types.get(j).getIsCovered() + " and ");
					}
					if (types.get(j).getColumnDateName().equalsIgnoreCase("Score")) {
						builder.append(" (" + types.get(j).getColumnDateName() + " >= " + start + " and "
								+ types.get(j).getColumnDateName() + " < " + end + " ) ");
						if (list.get(i).equalsIgnoreCase(">")) {
							builder.append(" and " + " CreateDate  <= DATEADD(Week,-4,"+"'"+ dateNew+"'"+")");
						} else {
							builder.append(" and " + " CreateDate  < DATEADD(Week," + "-" + list.get(i).replace("W", "")
									+ "+ 1" + ","+"'"+ dateNew+"'"+") and CreateDate >= DATEADD(Week," + "-"
									+ list.get(i).replace("W", "") + ","+"'"+ dateNew+"'"+")");
						}
					} else {
						if (list.get(i).equalsIgnoreCase(">")) {
							builder.append(types.get(j).getColumnDateName() + " <= DATEADD(" + date + "," + "-"
									+ types.get(j).getStart() + ", "+"'"+ dateNew+"'"+") " + " and " + types.get(j).getColumnDateName()
									+ " > DATEADD(" + date + "," + "-" + (end - weeks.get(i)) + ", "+"'"+ dateNew+"'"+") ");
						} else {
							builder.append(types.get(j).getColumnDateName() + " <= DATEADD(" + date + "," + "-"
									+ (end - (weeks.get(i) + 7)) + ", "+"'"+ dateNew+"'"+") " + " and " + types.get(j).getColumnDateName()
									+ " > DATEADD(" + date + "," + "-" + (end - weeks.get(i)) + ", "+"'"+ dateNew+"'"+") ");
						}
					}
					builder.append(CommonsViewData.CONDITION + " ");
					builder.append(" " + " as " + types.get(j).getColorType().replace("-", ""));
					if (j + 1 == types.size()) {
					} else {
						builder.append(" , ");
					}
				}
				if (type.equalsIgnoreCase("Comp")) {
					builder.append(CommonsViewData.FROMCOMPLIANCEHISTORY);
				} else {
					builder.append(CommonsViewData.FROMCOVERAGEHISTORY);
				}
				if (i != 4) {
					builder.append(" union ");
				}
			}

			query = builder.toString();
			builder.delete(0, builder.length());
		}
		return query.replace("--", "-");
	}




//////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////
	public List<ViewInfo> getComplyCirclePerScore(int viewId, int subViewId, String country, String type,
			String viewName, String date) {
		QeuryBilder com = new QeuryBilder();
		String query = com.getDataPerScore(viewId, type, viewName);
		return getList(new JKFinder() {
			@Override
			public void setParamters(PreparedStatement ps) throws SQLException {
				int v1 = 1;
				int v2 = 2;
				int v3 = 3;
				int v4 = 4;
				if (query.contains("?,?,?,?")) {
					for (int i = 0; i < 2; i++) {
						ps.setInt(v1, viewId);
						ps.setInt(v2, subViewId);
						ps.setString(v3, country);
						ps.setString(v4, date);
						v1 += 4;
						v2 += 4;
						v3 += 4;
						v4 += 4;
					}
				}
			}

			@Override
			public ViewInfo populate(ResultSet rs) throws SQLException {

				ViewInfo item = new ViewInfo();
				item.setType(rs.getString("Type"));
				item.setGreenExist(rs.getLong("GreenExist"));
				item.setGreenNew(rs.getLong("GreenNew"));
				item.setOrangeExist(rs.getLong("OrangeExist"));
				item.setOrangeNew(rs.getLong("OrangeNew"));

				return item;
			}

			@Override
			public String getQuery() {
				return query;
			}
		});
	}

	////////////////////////////////////////////////



	/////////////// count of details per Score///////////////
	public String getDataPerScore(int viewID, String type, String viewName) {
		fillTheData(type + "-" + viewID, viewName);
		List<String> list = Arrays.asList("first", "second");
		List<AllRadarData> types = new ArrayList<>();
		types.add(greenExist);
		types.add(greenNew);
		types.add(orangeExist);
		types.add(orangeNew);
		
		if (types.get(0).getColorType() == null) {
			query = "\r\n" + "select 'first' as Type,   \r\n" + "0    as GreenExist ,\r\n" + "0    as GreenNew ,\r\n"
					+ "0    as OrangeExist ,\r\n" + "0    as OrangeNew \r\n" + "union \r\n"
					+ "select 'second' as Type,\r\n" + "0  as GreenExist ,\r\n" + "0  as GreenNew ,\r\n"
					+ "0  as OrangeExist ,\r\n" + "0  as OrangeExist ";
		} else {
			for (int i = 0; i < list.size(); i++) {
				builder.append("select " + "'" + list.get(i) + "'" + " as Type, ");
				for (AllRadarData item : types) {
					builder.append(" " + CommonsViewData.SUMCASE);

					if (item.getIsScanned() == -1) {
					} else {
						builder.append(" IsScanned = " + item.getIsScanned() + " and ");
					}
					if (item.getIsNew() == -1) {
					} else {
						builder.append(" IsNew = " + item.getIsNew() + " and ");
					}
					if (item.getIsComply() == -1) {
					} else {
						builder.append(" IsComply = " + item.getIsComply() + " and ");
					}
					if (item.getIsCovered() == -1) {
					} else {
						builder.append(" IsCoveredByControl = " + item.getIsCovered() + " and ");
					}
					if (item.getColumnDateName().equalsIgnoreCase("Score")) {
						if (list.get(i).equalsIgnoreCase("first")) {
							builder.append(" (" + item.getColumnDateName() + " >= "
									+ ((int) (item.getStart() + item.getEnd()) / 2) + " and " + item.getColumnDateName()
									+ " < " + item.getEnd() + " ) ");
						} else if (list.get(i).equalsIgnoreCase("second")) {
							builder.append(" (" + item.getColumnDateName() + " >= " + item.getStart() + " and "
									+ item.getColumnDateName() + " < " + ((int) (item.getStart() + item.getEnd()) / 2)
									+ " ) ");
						}
					} else {
						String x = (String) builder.toString().subSequence( builder.toString().length() - 4, builder.toString().length());
						if (x.contains("and")) {
							builder.delete(builder.length() - 4, builder.length());
						}
					}
					builder.append(CommonsViewData.CONDITION + " ");
					builder.append(" " + " as " + item.getColorType().replace("-", ""));
					if (item.getColorType().equalsIgnoreCase("Orange-New")) {
					} else {
						builder.append(" , ");
					}
				}
				if (type.equalsIgnoreCase("Comp")) {
					builder.append(CommonsViewData.FROMCOMPLIANCEHISTORY);
				} else {
					builder.append(CommonsViewData.FROMCOVERAGEHISTORY);
				}
				if (i != 1) {
					builder.append(" union ");
				}
			}
		

		query = builder.toString();
		builder.delete(0, builder.length());
		}
		return query;
	}




