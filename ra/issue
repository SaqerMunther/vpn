@ManagedBean(name = "mbMain")
@ViewScoped
public class MB_Main extends CmonManagedBean {
    
    private DataAccess da = new DataAccess();
    private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    
    // Dynamic parameters shared by all users.
    private int viewId;
    private int subViewId;
    private String country;
    private String viewText;
    private Map<Integer, List<String>> viewCountryMap;
    private Map<Integer, String> viewNameMap;
    
    // Example cached fields.
    private List<ViewInfo> circleExiCompDetails;
    private List<ViewInfo> circleCovPerWeek;
    private List<ViewInfo> circleCompPerWeek;
    
    @PostConstruct
    public void init() {
        // Initialize dynamic parameters.
        viewId = 1;
        subViewId = 10;
        country = "all";
        viewText = "sampleview";
        viewCountryMap = da.getViewCountryMap();
        viewNameMap = da.getViewNameMap();
        
        // Pass these parameters to CacheService.
        CacheService cache = CacheService.getInstance();
        cache.setViewCountryMap(viewCountryMap);
        cache.setViewNameMap(viewNameMap);
        
        // Synchronously load initial data.
        List<ViewInfo> firstCompCircle = getCompCircleScore("Comp");
        List<ViewInfo> firstDataWeek = getDataPerWeek("Cov", "false");
        processAndMapData();
        
        // The CacheService startupFlow() is already called automatically inside the singleton's constructor.
        // If you wish to update the parameters, you could call:
        // cache.startupFlow(viewId, subViewId, country, viewText);
    }
    
    public List<ViewInfo> getCompCircleScore(String type) {
        String dateStr = sdf.format(radar.getDate1()).trim();
        String key = CacheService.getInstance().getCacheKey("CompCircleScore", type, viewId, country, dateStr);
        
        List<ViewInfo> cachedResult = CacheService.getInstance().getFromCache(key);
        if (cachedResult != null && !cachedResult.isEmpty()) {
            return cachedResult;
        }
        
        List<ViewInfo> data = da.getComplyCirclePerScore(viewId, subViewId,
                country.equalsIgnoreCase("all") ? "" : country, type, viewText, dateStr);
        CacheService.getInstance().putInCache(key, data);
        return data;
    }
    
    public List<ViewInfo> getDataPerWeek(String type, String isNew) {
        String dateStr = sdf.format(radar.getDate1()).trim();
        String key = CacheService.getInstance().getCacheKey("DataPerWeek", type + "_" + isNew, viewId, country, dateStr);
        
        List<ViewInfo> cachedResult = CacheService.getInstance().getFromCache(key);
        if (cachedResult != null && !cachedResult.isEmpty()) {
            return cachedResult;
        }
        
        List<ViewInfo> data = da.getCoveragePerWeek(viewId, subViewId, 
                country.equalsIgnoreCase("all") ? "" : country, type, viewText, dateStr);
        CacheService.getInstance().putInCache(key, data);
        return data;
    }
    
    private void processAndMapData() {
        String dateStr = sdf.format(new Date());
        
        List<AssetInfo> listOne = da.getAllCoverage(viewId, -1, "", sdf.format(getPreviousMonth(1)));
        Map<String, Pair<Integer, Integer>> oneMonth = processAssetList(listOne);
        String keyOneMonth = CacheService.getInstance().getCacheKey("ProcessMap_OneMonth", "", viewId, country, dateStr);
        CacheService.getInstance().putInCache(keyOneMonth, oneMonth);
        
        List<AssetInfo> listTwo = da.getAllCoverage(viewId, -1, "", sdf.format(getPreviousMonth(2)));
        Map<String, Pair<Integer, Integer>> twoMonth = processAssetList(listTwo);
        String keyTwoMonth = CacheService.getInstance().getCacheKey("ProcessMap_TwoMonth", "", viewId, country, dateStr);
        CacheService.getInstance().putInCache(keyTwoMonth, twoMonth);
    }
    
    private Date getPreviousMonth(int months) {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.add(java.util.Calendar.MONTH, -months);
        cal.set(java.util.Calendar.DAY_OF_MONTH, 1);
        return cal.getTime();
    }
    
    // ... additional controller methods ...
}
