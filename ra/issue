// In MB_Main.java

// Field "now" should be initialized in init() or elsewhere. For safety, we use a fallback.
private LocalDate now;

// Calculates a date by subtracting an interval (months, weeks, or days) from the base date (now).
private LocalDate calculateLastDate(long end, String periodType) {
    // Use now if available, otherwise fallback to LocalDate.now()
    LocalDate baseDate = (now != null) ? now : LocalDate.now();
    // If periodType is null, default to subtracting days
    if (periodType == null) {
        // Optionally log a warning here
        return baseDate.minusDays(end);
    }
    if (periodType.contains("month")) {
        return baseDate.minusMonths(end);
    } else if (periodType.contains("week")) {
        return baseDate.minusWeeks(end);
    } else {
        return baseDate.minusDays(end);
    }
}

// Helper method to compute week number given a day of month.
private int getWeekNum(int dayOfMonth) {
    return (dayOfMonth - 1) / 7 + 1;
}

// Returns a code when the week number parameter equals ">" (i.e. greater than a certain week)
private String getCodeForGreaterThanWeek(LocalDate lastDate) {
    LocalDate baseDate = (now != null) ? now : LocalDate.now();
    long daysBetween = Math.abs(ChronoUnit.DAYS.between(lastDate, baseDate));
    // For example, subtract days to compute a reference date (adjust the formula as needed)
    LocalDate date = baseDate.minusDays(daysBetween - (4 * 7) + 1);
    int weekNumber = getWeekNum(date.getDayOfMonth());
    String month = date.getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH);
    return ">" + " " + month;
}

// Returns a code based on a specific week number.
private String getCodeForSpecificWeek(LocalDate lastDate, String weeknum, String weekCode) {
    LocalDate baseDate = (now != null) ? now : LocalDate.now();
    // Assuming weeknum is like "W1", "W2", etc.
    int week = Integer.parseInt(weeknum.substring(1));
    long daysBetween = Math.abs(ChronoUnit.DAYS.between(lastDate, baseDate));
    LocalDate date = baseDate.minusDays(daysBetween - (week * 7) + 1);
    int weekNumber = getWeekNum(date.getDayOfMonth());
    String month = date.getMonth().getDisplayName(TextStyle.SHORT, Locale.ENGLISH);
    return month + " " + weekCode + weekNumber;
}

// The method that builds a week box string based on input parameters.
public String getWeekBox(String weeknum, String type) {
    long end = 0;
    String weekCode = "W";
    String code = "";
    String periodType = "";
    LocalDate lastDate = null;
    
    // Sample logic: based on the 'type' value, choose appropriate values.
    // (In your actual code, these values come from objects such as greenExist, etc.)
    if ("Green-Exist".equalsIgnoreCase(type)) {
        end = 2; // e.g., 2 months
        periodType = "month";
    } else if ("SomeOtherType".equalsIgnoreCase(type)) {
        end = 3; // e.g., 3 weeks
        periodType = "week";
    } else {
        end = 1; // default value
        periodType = "day";
    }
    
    // Compute the base date using our safe method.
    lastDate = calculateLastDate(end, periodType);
    
    if (weeknum.equalsIgnoreCase(">")) {
        code = getCodeForGreaterThanWeek(lastDate);
    } else {
        code = getCodeForSpecificWeek(lastDate, weeknum, weekCode);
    }
    return code;
}
