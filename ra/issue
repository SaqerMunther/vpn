package com.app.dev.cmon.controllers;

import net.sf.ehcache.Cache;
import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;
import net.sf.ehcache.config.CacheConfiguration;
import net.sf.ehcache.config.Configuration;
import net.sf.ehcache.store.MemoryStoreEvictionPolicy;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.stream.Collectors;

import com.app.dev.cmon.components.ViewInfo;
import com.app.dev.cmon.components.Views;
import com.app.dev.cmon.utilites.CacheConstants;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CacheService {
    private static final Logger logger = LoggerFactory.getLogger(CacheService.class);
    private static CacheService instance;
    
    private CacheManager cacheManager;
    private Cache dataPerWeekCache;
    private Timer timer;
    private DataAccess da = new DataAccess();
    
    private Map<Integer, List<String>> viewCountryMap;
    private Map<Integer, String> viewNameMap;
    
    // Private constructor for Singleton
    private CacheService() {
        Configuration config = new Configuration();
        CacheConfiguration cacheConfig = new CacheConfiguration("dataPerWeekCache", 500000)
                .eternal(false)
                .timeToIdleSeconds(180)
                .timeToLiveSeconds(300)
                .memoryStoreEvictionPolicy(MemoryStoreEvictionPolicy.LRU);
        config.addCache(cacheConfig);
        cacheManager = CacheManager.newInstance(config);
        dataPerWeekCache = cacheManager.getCache("dataPerWeekCache");
        scheduleCacheRefresh();
        logger.info("CacheService initialized and cache refresh scheduled.");
    }

    public static synchronized CacheService getInstance() {
        if (instance == null) {
            instance = new CacheService();
        }
        return instance;
    }

    private void scheduleCacheRefresh() {
        timer = new Timer();
        // Refresh every 10 minutes (update comment if needed)
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                List<Date> lastDates = da.getLastDate();
                Date date = lastDates.isEmpty() ? new Date() : lastDates.get(0);
                refreshDataPerWeekCache(date.toString());
            }
        }, 0, 10 * 60 * 1000);
        logger.info("Cache refresh task scheduled to run every 10 minutes.");
    }

    // Helper method to generate a cache key consistently
    private String generateCacheKey(String type, String isNew, int viewId, String country, String date) {
        return type.toLowerCase() + "_" + isNew.toLowerCase() + "_" + viewId + "_" + country.toLowerCase() + "_" + date;
    }
    
    // Refresh cache using instance maps directly
    public void refreshDataPerWeekCache(String date) {
        logger.info("Refreshing dataPerWeekCache...");
        dataPerWeekCache.removeAll();
        logger.info("dataPerWeekCache has been cleared.");
        
        for (String type : CacheConstants.RADAR_TYPES) {
            for (String isNew : CacheConstants.RADAR_IS_NEW) {
                for (Map.Entry<Integer, List<String>> entry : viewCountryMap.entrySet()) {
                    Integer viewId = entry.getKey();
                    List<String> countries = entry.getValue();
                    for (String country : countries) {
                        List<Integer> subViews = da.getSubViews(viewId)
                                .stream()
                                .map(Views::getId)
                                .collect(Collectors.toList());
                        for (Integer subViewId : subViews) {
                            String cacheKey = generateCacheKey(type, isNew, viewId, country, date);
                            logger.debug("Populating cache for key: {}", cacheKey);
                            List<ViewInfo> data = da.getCoveragePerWeek(viewId, subViewId,
                                    country.equalsIgnoreCase("all") ? "" : country,
                                    type, viewNameMap.get(viewId), date);
                            dataPerWeekCache.put(new Element(cacheKey, data));
                            logger.info("Data for key: {} has been cached.", cacheKey);
                        }
                    }
                }
            }
        }
        logger.info("Current cache size after refresh: {}", dataPerWeekCache.getSize());
    }

    // Retrieve data from cache or fetch and cache it if missing
    public List<ViewInfo> getDataPerWeek(String type, String isNew, int viewId, int subViewId, String country, String viewText, String date) {
        String cacheKey = generateCacheKey(type, isNew, viewId, country, date);
        logger.debug("Fetching data for cache key: {}", cacheKey);
        
        Element cachedElement = dataPerWeekCache.get(cacheKey);
        if (cachedElement != null) {
            logger.info("Cache hit for key: {}", cacheKey);
            return (List<ViewInfo>) cachedElement.getObjectValue();
        }
        
        logger.info("Cache miss for key: {}. Fetching data from DataAccess.", cacheKey);
        List<ViewInfo> data = da.getCoveragePerWeek(viewId, subViewId,
                country.equalsIgnoreCase("all") ? "" : country,
                type, viewText, date);
        dataPerWeekCache.put(new Element(cacheKey, data));
        logger.info("Data for key: {} has been cached.", cacheKey);
        logger.info("Current cache size: {}", dataPerWeekCache.getSize());
        
        return data;
    }
    
    public void shutdown() {
        if (timer != null) {
            timer.cancel();
            logger.info("Cache refresh timer cancelled.");
        }
        cacheManager.shutdown();
        logger.info("CacheManager has been shut down.");
    }

    // Getters and Setters for viewCountryMap and viewNameMap
    public Map<Integer, List<String>> getViewCountryMap() {
        return viewCountryMap;
    }

    public void setViewCountryMap(Map<Integer, List<String>> viewCountryMap) {
        this.viewCountryMap = viewCountryMap;
    }

    public Map<Integer, String> getViewNameMap() {
        return viewNameMap;
    }

    public void setViewNameMap(Map<Integer, String> viewNameMap) {
        this.viewNameMap = viewNameMap;
    }
}


////////////////////////////////////////////////////////////////////////////////////



    public List<ViewInfo> getDataPerWeek(String type, String isNew) {
        String date = sdf.format(radar.getDate1()).trim(); // Format the date as needed
        return cacheService.getDataPerWeek(type, isNew, da, viewId, subViewId, country, viewText, date);
    }
	
