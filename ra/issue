    private Date getPreviousMonth(int months) {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.add(java.util.Calendar.MONTH, -months);
        cal.set(java.util.Calendar.DAY_OF_MONTH, 1);
        return cal.getTime();
    }

    public List<ViewInfo> getDataPerWeek(String type, String isNew) {
        String dateStr = sdf.format(radar.getDate1()).trim();
        String key = "DataPerWeek_".toLowerCase() + type.toLowerCase() + "_" + isNew.toLowerCase() + "_" + viewId + "_" + subViewId + "_" +
                (country.equalsIgnoreCase("all") ? "all" : country.toLowerCase()) + "_" + viewText + "_" + dateStr;
        
        List<ViewInfo> cachedResult = CacheService.getInstance().getFromCache(key);
        if (cachedResult != null && !cachedResult.isEmpty()) {
            return cachedResult;
        }
        
        List<ViewInfo> data = da.getCoveragePerWeek(viewId, subViewId, 
                country.equalsIgnoreCase("all") ? "" : country, type, viewText, dateStr);
        CacheService.getInstance().putInCache(key, data);
        return data;
    }
	



	    public List<ViewInfo> getCompCircleScore(String type) {
	        String dateStr = sdf.format(radar.getDate1()).trim();
	        String key = "CompCircleScore_".toLowerCase() + viewId + "_" + subViewId + "_" +
	                (country.equalsIgnoreCase("all") ? "all" : country.toLowerCase()) + "_" +
	                type.toLowerCase() + "_" + viewText.toLowerCase() + "_" + dateStr;
	        
	        List<ViewInfo> cachedResult = CacheService.getInstance().getFromCache(key);
	        if (cachedResult != null && !cachedResult.isEmpty()) {
	            return cachedResult;
	        }
	        
	        List<ViewInfo> data = da.getComplyCirclePerScore(viewId, subViewId,
	                country.equalsIgnoreCase("all") ? "" : country, type, viewText, dateStr);
	        CacheService.getInstance().putInCache(key, data);
	        return data;
	    }




    private void processAndMapData() {
        String dateStr = sdf.format(new Date());
        
        List<AssetInfo> listOne = da.getAllCoverage(viewId, -1, "", sdf.format(getPreviousMonth(1)));
        Map<String, Pair<Integer, Integer>> oneMonth = processAssetList(listOne);
        String keyOneMonth = "ProcessMap_OneMonth_".toLowerCase() + viewId + "_" + subViewId + "_" +
                (country.equalsIgnoreCase("all") ? "all" : country.toLowerCase()) + "_" + dateStr;
        CacheService.getInstance().putInCache(keyOneMonth, oneMonth);
        
        List<AssetInfo> listTwo = da.getAllCoverage(viewId, -1, "", sdf.format(getPreviousMonth(2)));
        Map<String, Pair<Integer, Integer>> twoMonth = processAssetList(listTwo);
        String keyTwoMonth = "ProcessMap_TwoMonth_".toLowerCase() + viewId + "_" + subViewId + "_" +
                (country.equalsIgnoreCase("all") ? "all" : country) + "_" + dateStr;
        CacheService.getInstance().putInCache(keyTwoMonth, twoMonth);
    }
	
