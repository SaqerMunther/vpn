/////////////////////////////////////////////////////////////////////
// Optimized getCoveragePerWeek (no logic change)
public List<ViewInfo> getCoveragePerWeek(int viewId, int subViewId, String country, String type, String viewName, String date) {
    QeuryBilder com = new QeuryBilder();
    final String query = com.getDataPerWeek(viewId, type, viewName, date);
    
    return getList(new JKFinder() {
        @Override
        public void setParamters(PreparedStatement ps) throws SQLException {
            // If the query contains four placeholders repeated, set parameters in groups of 4.
            if (query.contains("?,?,?,?")) {
                final int groups = 5;
                for (int i = 0, v1 = 1, v2 = 2, v3 = 3, v4 = 4; i < groups; i++, v1 += 4, v2 += 4, v3 += 4, v4 += 4) {
                    ps.setInt(v1, viewId);
                    ps.setInt(v2, subViewId);
                    ps.setString(v3, country);
                    ps.setString(v4, date);
                }
            }
        }

        @Override
        public ViewInfo populate(ResultSet rs) throws SQLException {
            ViewInfo item = new ViewInfo();
            item.setType(rs.getString("Type"));
            item.setGreenExist(rs.getLong("GreenExist"));
            item.setGreenNew(rs.getLong("GreenNew"));
            item.setOrangeExist(rs.getLong("OrangeExist"));
            item.setOrangeNew(rs.getLong("OrangeNew"));
            item.setRedExist(rs.getLong("RedExist"));
            item.setRedNew(rs.getLong("RedNew"));
            return item;
        }

        @Override
        public String getQuery() {
            return query;
        }
    });
}

/////////////////////////////////////////////////////////////////////
// Optimized getDataPerWeek without changing the logic
public String getDataPerWeek(int viewID, String type, String viewName, String dateNew) {
    int start = 0, end = 0;
    String date = "day";
    fillTheData(type + "-" + viewID, viewName);
    
    List<String> periodLabels = Arrays.asList(">", "W4", "W3", "W2", "W1");
    List<Integer> weeks = Arrays.asList(28, 21, 14, 7, 0);
    List<AllRadarData> types = new ArrayList<>();
    
    // Ensure defaults are applied
    types.add(setDefaultsIfNull(greenExist));
    types.add(setDefaultsIfNull(greenNew));
    types.add(setDefaultsIfNull(orangeExist));
    types.add(setDefaultsIfNull(orangeNew));
    types.add(setDefaultsIfNull(redExist));
    types.add(setDefaultsIfNull(redNew));
    
    if (types.get(0).getColorType() == null) {
        query = "select '>' as Type, 0 as GreenExist, 0 as GreenNew, 0 as OrangeExist, 0 as OrangeNew, 0 as RedExist, 0 as RedNew " +
                "union " +
                "select 'W4' as Type, 0 as GreenExist, 0 as GreenNew, 0 as OrangeExist, 0 as OrangeExist, 0 as RedExist, 0 as RedNew " +
                "union " +
                "select 'W3' as Type, 0 as GreenExist, 0 as GreenNew, 0 as OrangeExist, 0 as OrangeNew, 0 as RedExist, 0 as RedNew " +
                "union " +
                "select 'W2' as Type, 0 as GreenExist, 0 as GreenNew, 0 as OrangeExist, 0 as OrangeNew, 0 as RedExist, 0 as RedNew " +
                "union " +
                "select 'W1' as Type, 0 as GreenExist, 0 as GreenNew, 0 as OrangeExist, 0 as OrangeNew, 0 as RedExist, 0 as RedNew";
    } else {
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < periodLabels.size(); i++) {
            builder.append("select '").append(periodLabels.get(i)).append("' as Type, ");
            for (int j = 0; j < types.size(); j++) {
                AllRadarData radarData = types.get(j);
                // Determine start/end based on time period
                if ("month".equalsIgnoreCase(radarData.getTimePeriod())) {
                    start = radarData.getStart() * 30;
                    end = radarData.getEnd() * 30;
                    date = "day";
                } else if ("week".equalsIgnoreCase(radarData.getTimePeriod())) {
                    start = radarData.getStart() * 7;
                    end = radarData.getEnd() * 7;
                    date = "day";
                } else {
                    start = radarData.getStart();
                    end = radarData.getEnd();
                    date = radarData.getTimePeriod();
                }
                builder.append(" ").append(CommonsViewData.SUMCASE);
                if (radarData.getIsScanned() != -1) {
                    builder.append(" IsScanned = ").append(radarData.getIsScanned()).append(" and ");
                }
                if (radarData.getIsNew() != -1) {
                    builder.append(" IsNew = ").append(radarData.getIsNew()).append(" and ");
                }
                if (radarData.getIsComply() != -1) {
                    builder.append(" IsComply = ").append(radarData.getIsComply()).append(" and ");
                }
                if (radarData.getIsCovered() != -1) {
                    builder.append(" IsCoveredByControl = ").append(radarData.getIsCovered()).append(" and ");
                }
                if ("Score".equalsIgnoreCase(radarData.getColumnDateName())) {
                    if (">".equalsIgnoreCase(periodLabels.get(i))) {
                        builder.append(" (").append(radarData.getColumnDateName()).append(" >= ").append(start)
                               .append(" and ").append(radarData.getColumnDateName()).append(" < ").append(end)
                               .append(" ) and CreateDate <= DATEADD(Week,-4,'").append(dateNew).append("')");
                    } else {
                        builder.append(" (").append(radarData.getColumnDateName()).append(" < DATEADD(Week,-")
                               .append(periodLabels.get(i).replace("W", "")).append("+ 1,'").append(dateNew)
                               .append("') and ").append(radarData.getColumnDateName()).append(" >= DATEADD(Week,-")
                               .append(periodLabels.get(i).replace("W", "")).append(",'").append(dateNew).append("'))");
                    }
                } else {
                    if (">".equalsIgnoreCase(periodLabels.get(i))) {
                        builder.append(radarData.getColumnDateName()).append(" <= DATEADD(").append(date)
                               .append(",-").append(radarData.getStart()).append(",'").append(dateNew)
                               .append("') and ").append(radarData.getColumnDateName()).append(" > DATEADD(")
                               .append(date).append(",-").append((end - weeks.get(i))).append(",'").append(dateNew)
                               .append("') ");
                    } else {
                        builder.append(radarData.getColumnDateName()).append(" <= DATEADD(").append(date)
                               .append(",-").append((end - (weeks.get(i) + 7))).append(",'").append(dateNew)
                               .append("') and ").append(radarData.getColumnDateName()).append(" > DATEADD(")
                               .append(date).append(",-").append((end - weeks.get(i))).append(",'").append(dateNew)
                               .append("') ");
                    }
                }
                builder.append(CommonsViewData.CONDITION).append(" as ")
                       .append(radarData.getColorType().replace("-", ""));
                if (j < types.size() - 1) {
                    builder.append(" , ");
                }
            }
            if ("Comp".equalsIgnoreCase(type)) {
                builder.append(CommonsViewData.FROMCOMPLIANCEHISTORY);
            } else {
                builder.append(CommonsViewData.FROMCOVERAGEHISTORY);
            }
            if (i < periodLabels.size() - 1) {
                builder.append(" union ");
            }
        }
        query = builder.toString();
    }
    return query.replace("--", "-");
}

//////////////////////////////////////////////////////////////////////////
// Optimized getComplyCirclePerScore (no logic change)
public List<ViewInfo> getComplyCirclePerScore(int viewId, int subViewId, String country, String type, String viewName, String date) {
    QeuryBilder com = new QeuryBilder();
    final String query = com.getDataPerScore(viewId, type, viewName);
    
    return getList(new JKFinder() {
        @Override
        public void setParamters(PreparedStatement ps) throws SQLException {
            if (query.contains("?,?,?,?")) {
                final int groups = 2;
                for (int i = 0, v1 = 1, v2 = 2, v3 = 3, v4 = 4; i < groups; i++, v1 += 4, v2 += 4, v3 += 4, v4 += 4) {
                    ps.setInt(v1, viewId);
                    ps.setInt(v2, subViewId);
                    ps.setString(v3, country);
                    ps.setString(v4, date);
                }
            }
        }

        @Override
        public ViewInfo populate(ResultSet rs) throws SQLException {
            ViewInfo item = new ViewInfo();
            item.setType(rs.getString("Type"));
            item.setGreenExist(rs.getLong("GreenExist"));
            item.setGreenNew(rs.getLong("GreenNew"));
            item.setOrangeExist(rs.getLong("OrangeExist"));
            item.setOrangeNew(rs.getLong("OrangeNew"));
            return item;
        }

        @Override
        public String getQuery() {
            return query;
        }
    });
}

////////////////////////////////////////////////
// Optimized getDataPerScore without changing the logic
public String getDataPerScore(int viewID, String type, String viewName) {
    fillTheData(type + "-" + viewID, viewName);
    List<String> scoreLabels = Arrays.asList("first", "second");
    List<AllRadarData> types = new ArrayList<>();
    types.add(greenExist);
    types.add(greenNew);
    types.add(orangeExist);
    types.add(orangeNew);
    
    if (types.get(0).getColorType() == null) {
        query = "select 'first' as Type, 0 as GreenExist, 0 as GreenNew, 0 as OrangeExist, 0 as OrangeNew " +
                "union " +
                "select 'second' as Type, 0 as GreenExist, 0 as GreenNew, 0 as OrangeExist, 0 as OrangeExist";
    } else {
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < scoreLabels.size(); i++) {
            builder.append("select '").append(scoreLabels.get(i)).append("' as Type, ");
            for (int j = 0; j < types.size(); j++) {
                AllRadarData item = types.get(j);
                builder.append(" ").append(CommonsViewData.SUMCASE);
                if (item.getIsScanned() != -1) {
                    builder.append(" IsScanned = ").append(item.getIsScanned()).append(" and ");
                }
                if (item.getIsNew() != -1) {
                    builder.append(" IsNew = ").append(item.getIsNew()).append(" and ");
                }
                if (item.getIsComply() != -1) {
                    builder.append(" IsComply = ").append(item.getIsComply()).append(" and ");
                }
                if (item.getIsCovered() != -1) {
                    builder.append(" IsCoveredByControl = ").append(item.getIsCovered()).append(" and ");
                }
                if ("Score".equalsIgnoreCase(item.getColumnDateName())) {
                    if ("first".equalsIgnoreCase(scoreLabels.get(i))) {
                        builder.append(" (").append(item.getColumnDateName()).append(" >= ")
                               .append((int)((item.getStart() + item.getEnd()) / 2))
                               .append(" and ").append(item.getColumnDateName()).append(" < ")
                               .append(item.getEnd()).append(" ) ");
                    } else if ("second".equalsIgnoreCase(scoreLabels.get(i))) {
                        builder.append(" (").append(item.getColumnDateName()).append(" >= ")
                               .append(item.getStart()).append(" and ")
                               .append(item.getColumnDateName()).append(" < ")
                               .append((int)((item.getStart() + item.getEnd()) / 2))
                               .append(" ) ");
                    }
                } else {
                    // If the last appended token ends with " and ", remove it.
                    String temp = builder.toString();
                    if (temp.endsWith(" and ")) {
                        builder.setLength(builder.length() - 4);
                    }
                }
                builder.append(CommonsViewData.CONDITION).append(" as ")
                       .append(item.getColorType().replace("-", ""));
                if (!"Orange-New".equalsIgnoreCase(item.getColorType())) {
                    builder.append(" , ");
                }
            }
            if ("Comp".equalsIgnoreCase(type)) {
                builder.append(CommonsViewData.FROMCOMPLIANCEHISTORY);
            } else {
                builder.append(CommonsViewData.FROMCOVERAGEHISTORY);
            }
            if (i < scoreLabels.size() - 1) {
                builder.append(" union ");
            }
        }
        query = builder.toString();
    }
    return query;
}
