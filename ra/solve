public static LocalDate toLocalDateAtMidnight(Date date) {
    return Optional.ofNullable(date)
        .map(d -> d.toInstant()
                   .atZone(ZoneId.systemDefault())
                   .toLocalDate())
        .orElse(null);
}




public void setDateValidations() {
    List<RadarDashValidation> validations = da.getRadarDashValidation();
    if (validations == null || validations.isEmpty()) {
        this.lastValidDate = LocalDate.now();      // in java.time
        return;
    }

    LocalDate today = LocalDate.now();
    LocalDate maxValid = validations.stream()
        .filter(v -> v.isComplianceMatch() && v.isCoverageMatch())
        .map(v -> v.getInsertDate()
                   .toInstant()
                   .atZone(ZoneId.systemDefault())
                   .toLocalDate())
        .max(LocalDate::compareTo)
        .orElse(today);

    // Never set a “future” date
    this.lastValidDate = maxValid.isAfter(today) ? today : maxValid;
}



private void refreshRadarIfStale() {
    LocalDate today = LocalDate.now();
    LocalDate lastValid = radarValidation.getLastValidDate(); // now a LocalDate
    if (lastValid.isBefore(today)) {
        radarValidation.setDateValidations();
        radarValidation.validateCycle();
        radar.init(); 
    }
    this.now = radarValidation.getLastValidDate();
}



private void refreshRadarIfStale() {
    LocalDate today = LocalDate.now();
    LocalDate lastValid = radarValidation.getLastValidDate(); // now a LocalDate
    if (lastValid.isBefore(today)) {
        radarValidation.setDateValidations();
        radarValidation.validateCycle();
        radar.init(); 
    }
    this.now = radarValidation.getLastValidDate();
}



@PostConstruct
public void init() {
    refreshRadarIfStale();
    isSymantec();
}


public void validateCycle() {
    // 1. Fetch the very latest sync record
    ServiceSyncMain lastSync = da.getLatestSyncMain().stream()
        .max(Comparator.comparingInt(ServiceSyncMain::getSyncID))
        .orElse(null);

    if (lastSync == null) {
        // No syncs at all → treat as issue
        setCycleStatus(commons.CYCLEISSUE);
        setValidateCycle(true);
        return;
    }

    // 2. If it’s still fetching, flag as “fetching”
    if (lastSync.isFetching()) {
        setCycleStatus(commons.CYCLEFETCHING);
        setValidateCycle(true);
        return;
    }

    // 3. Compare completed date vs. lastValidDate (both as LocalDate)
    LocalDate completedDate = lastSync.getCompletedDate()
        .toInstant()
        .atZone(ZoneId.systemDefault())
        .toLocalDate();

    LocalDate lastValid = this.lastValidDate; // assume this is already a LocalDate

    if (completedDate.isAfter(lastValid)) {
        setCycleStatus(commons.CYCLEISSUE);
        setValidateCycle(true);
        return;
    }

    // 4. Check that the cache’s lastSyncID matches the cycleID
    int cachedSyncId = CacheService.getInstance().getLastSyncID();
    if (lastSync.getCycleID() != cachedSyncId) {
        setCycleStatus(commons.CYCLEISSUE);
        setValidateCycle(true);
        return;
    }

    // 5. If we got here, everything is OK
    setCycleStatus(commons.CYCLEOK);
    setValidateCycle(false);
}
