package com.app.dev.cmon.cache;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class CacheService {
    private static CacheService instance = new CacheService();
    private Map<String, Object> cache = new ConcurrentHashMap<>();

    private CacheService() { }

    public static CacheService getInstance() {
        return instance;
    }

    public <T> T getCachedObject(String key) {
        return (T) cache.get(key);
    }

    public void putCachedObject(String key, Object value) {
        cache.put(key, value);
    }
}


package com.app.dev.cmon.cache;

import com.arabbank.dev.utility.Pair;
import java.util.Map;

public class CoverageMaps {
    private Map<String, Pair<Integer, Integer>> oneMonthMap;
    private Map<String, Pair<Integer, Integer>> twoMonthMap;

    public CoverageMaps(Map<String, Pair<Integer, Integer>> oneMonthMap, Map<String, Pair<Integer, Integer>> twoMonthMap) {
        this.oneMonthMap = oneMonthMap;
        this.twoMonthMap = twoMonthMap;
    }

    public Map<String, Pair<Integer, Integer>> getOneMonthMap() {
        return oneMonthMap;
    }

    public Map<String, Pair<Integer, Integer>> getTwoMonthMap() {
        return twoMonthMap;
    }
}


package com.app.dev.cmon.controllers;

// ... (other imports) ...
import com.app.dev.cmon.cache.CachedDataService;
import com.app.dev.cmon.cache.CoverageMaps;

@ManagedBean(name = "mbMain")
@ViewScoped
public class MB_Main extends CmonManagedBean {
    // ... (other fields) ...
    
    private CachedDataService cachedDataService = new CachedDataService();
    private DataAccess da;  // Assume this is properly initialized/injected
    private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    
    // Fields updated from cached data
    private Map<String, Pair<Integer, Integer>> oneMonthMap;
    private Map<String, Pair<Integer, Integer>> twoMonthMap;
    private List<ViewInfo> circleExiCompDetails;
    
    private int viewId;
    private int subViewId;
    private String country;
    private String viewText;
    private RadarController radar; // Assume this is set from context

    // --- Updated method for processing and mapping coverage data using cache ---
    private void updateCoverageMaps() {
        CoverageMaps maps = cachedDataService.getCoverageMaps(viewId, subViewId, country, da, sdf);
        oneMonthMap = maps.getOneMonthMap();
        twoMonthMap = maps.getTwoMonthMap();
    }
    
    // --- Updated method for retrieving compliance circle scores using cache ---
    public List<ViewInfo> updateCompCircleScore(String type) {
        String dateStr = sdf.format(radar.getDate1()).trim();
        circleExiCompDetails = cachedDataService.getCompCircleScore(
            type, viewId, subViewId, country, viewText, dateStr, da);
        return circleExiCompDetails;
    }
    
    // --- Example of calling the cache-enabled methods in init ---
    @PostConstruct
    public void init() {
        // ... (other initialization logic, e.g. setting viewId, subViewId, country, viewText from radar) ...
        viewId = radar.getViewId();
        subViewId = radar.getSubViewId();
        country = radar.getCountry();
        viewText = radar.getViewText();
        
        // Load the current view's coverage maps synchronously.
        updateCoverageMaps();
        
        // Optionally, you can launch background preloading (e.g., with an ExecutorService) for additional combinations.
    }
    
    // ... (rest of MB_Main code) ...
}
