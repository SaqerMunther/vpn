		public List<ViewInfo> getCompCircleScore(String type) {
			if (circleExiCompDetails == null || circleExiCompDetails.size() < 1) {
				circleExiCompDetails = da.getComplyCirclePerScore(viewId, subViewId,
						country.equalsIgnoreCase("all") ? "" : country, type, viewText,
						sdf.format(radar.getDate1()).trim());
			}
			return circleExiCompDetails;

		}

	private void processAndMapData() {
	    List<AssetInfo> listOne = da.getAllCoverage(viewId, -1, "", sdf.format(getPreviousMonth(1)));
	    List<AssetInfo> listTwo = da.getAllCoverage(viewId, -1, "", sdf.format(getPreviousMonth(2)));
	    
	    oneMonthMap = processAssetList(listOne);

	    twoMonthMap = processAssetList(listTwo);
	}


	public List<ViewInfo> getDataPerWeek(String type, String isNew) {

		if (type.equalsIgnoreCase("Cov")) {
			if (circleCovPerWeek == null || circleCovPerWeek.size() < 1) {
				circleCovPerWeek = da.getCoveragePerWeek(viewId, subViewId, country.equalsIgnoreCase("all") ? "" : country, type, viewText,sdf.format(radar.getDate1()).trim());
			}
			return circleCovPerWeek;
		} else {
			if (circleCompPerWeek == null || circleCompPerWeek.size() < 1) {
				circleCompPerWeek = da.getCoveragePerWeek(viewId, subViewId, country.equalsIgnoreCase("all") ? "" : country, type, viewText,sdf.format(radar.getDate1()).trim());
			}
			return circleCompPerWeek;
		}
	}

/////////////////////////////////////////////////////////////////////////

public List<ViewInfo> getCompCircleScore(String type) {
    String dateStr = sdf.format(radar.getDate1()).trim();
    String key = "CompCircleScore_" + viewId + "_" + subViewId + "_" +
            (country.equalsIgnoreCase("all") ? "all" : country) + "_" +
            type + "_" + viewText + "_" + dateStr;
    
    // Attempt to retrieve from cache.
    List<ViewInfo> cachedResult = CacheService.getInstance().getFromCache(key);
    if (cachedResult != null && !cachedResult.isEmpty()) {
        return cachedResult;
    }
    
    // Otherwise, fetch the data.
    List<ViewInfo> data = da.getComplyCirclePerScore(viewId, subViewId,
            country.equalsIgnoreCase("all") ? "" : country, type, viewText, dateStr);
    
    // Cache the fetched data.
    CacheService.getInstance().putInCache(key, data);
    return data;
}


/////////////////////////////////////////////

private void processAndMapData() {
    String dateStr = sdf.format(new Date());
    
    // One month map
    List<AssetInfo> listOne = da.getAllCoverage(viewId, -1, "", sdf.format(getPreviousMonth(1)));
    Map<String, Pair<Integer, Integer>> oneMonth = processAssetList(listOne);
    String keyOneMonth = "ProcessMap_OneMonth_" + viewId + "_" + subViewId + "_" +
            (country.equalsIgnoreCase("all") ? "all" : country) + "_" + dateStr;
    CacheService.getInstance().putInCache(keyOneMonth, oneMonth);
    oneMonthMap = oneMonth; // update local field if needed

    // Two month map
    List<AssetInfo> listTwo = da.getAllCoverage(viewId, -1, "", sdf.format(getPreviousMonth(2)));
    Map<String, Pair<Integer, Integer>> twoMonth = processAssetList(listTwo);
    String keyTwoMonth = "ProcessMap_TwoMonth_" + viewId + "_" + subViewId + "_" +
            (country.equalsIgnoreCase("all") ? "all" : country) + "_" + dateStr;
    CacheService.getInstance().putInCache(keyTwoMonth, twoMonth);
    twoMonthMap = twoMonth; // update local field if needed
}


////////////////////////////////////////////////////////

public List<ViewInfo> getDataPerWeek(String type, String isNew) {
    String dateStr = sdf.format(radar.getDate1()).trim();
    String key = "DataPerWeek_" + type + "_" + isNew + "_" + viewId + "_" + subViewId + "_" +
            (country.equalsIgnoreCase("all") ? "all" : country) + "_" + viewText + "_" + dateStr;
    
    // Try cache first.
    List<ViewInfo> cachedResult = CacheService.getInstance().getFromCache(key);
    if (cachedResult != null && !cachedResult.isEmpty()) {
        return cachedResult;
    }
    
    // Fetch the data if not cached.
    List<ViewInfo> data;
    if (type.equalsIgnoreCase("Cov")) {
        data = da.getCoveragePerWeek(viewId, subViewId, 
                country.equalsIgnoreCase("all") ? "" : country, type, viewText, dateStr);
    } else {
        data = da.getCoveragePerWeek(viewId, subViewId, 
                country.equalsIgnoreCase("all") ? "" : country, type, viewText, dateStr);
    }
    
    // Store in cache.
    CacheService.getInstance().putInCache(key, data);
    return data;
}


/////////////////////////////////////////////////////////

@PostConstruct
public void init() {
    // ... your existing initialization code ...
    // Synchronously load the first viewâ€™s data (via getCompCircleScore, getDataPerWeek, etc.)
    // Then trigger asynchronous preloading:
    CacheService.getInstance().preloadCacheBackground(viewId, subViewId, country, viewText);
}



/////////////////////////////////////////////////////////////////////

@ManagedBean(name = "mbMain")
@ViewScoped
public class MB_Main extends CmonManagedBean {
    
    private DataAccess da = new DataAccess();
    private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    
    // Dynamic parameters
    private int viewId;
    private int subViewId;
    private String country;
    private String viewText;
    private Map<Integer, List<String>> viewCountryMap;
    private Map<Integer, String> viewNameMap;
    
    // Cached methods
    private List<ViewInfo> circleExiCompDetails;
    private List<ViewInfo> circleCovPerWeek;
    private List<ViewInfo> circleCompPerWeek;
    
    @PostConstruct
    public void init() {
        // Initialize dynamic parameters (these may come from DataAccess or configuration)
        viewId = 1;
        subViewId = 10;
        country = "all";
        viewText = "SampleView";
        viewCountryMap = da.getViewCountryMap();
        viewNameMap = da.getViewNameMap();
        
        // Provide these parameters to CacheService.
        CacheService cache = CacheService.getInstance();
        cache.setViewCountryMap(viewCountryMap);
        cache.setViewNameMap(viewNameMap);
        
        // Synchronously load first view data.
        List<ViewInfo> firstCompCircle = getCompCircleScore("Comp");
        List<ViewInfo> firstDataWeek = getDataPerWeek("Cov", "false");
        processAndMapData();
        
        // Let CacheService handle the startup flow.
        cache.startupFlow(viewId, subViewId, country, viewText);
    }
    
    public List<ViewInfo> getCompCircleScore(String type) {
        String dateStr = sdf.format(radar.getDate1()).trim();
        String key = "CompCircleScore_" + viewId + "_" + subViewId + "_" +
                (country.equalsIgnoreCase("all") ? "all" : country) + "_" +
                type + "_" + viewText + "_" + dateStr;
        
        List<ViewInfo> cachedResult = CacheService.getInstance().getFromCache(key);
        if (cachedResult != null && !cachedResult.isEmpty()) {
            return cachedResult;
        }
        
        List<ViewInfo> data = da.getComplyCirclePerScore(viewId, subViewId,
                country.equalsIgnoreCase("all") ? "" : country, type, viewText, dateStr);
        CacheService.getInstance().putInCache(key, data);
        return data;
    }
    
    private void processAndMapData() {
        String dateStr = sdf.format(new Date());
        
        List<AssetInfo> listOne = da.getAllCoverage(viewId, -1, "", sdf.format(getPreviousMonth(1)));
        Map<String, Pair<Integer, Integer>> oneMonth = processAssetList(listOne);
        String keyOneMonth = "ProcessMap_OneMonth_" + viewId + "_" + subViewId + "_" +
                (country.equalsIgnoreCase("all") ? "all" : country) + "_" + dateStr;
        CacheService.getInstance().putInCache(keyOneMonth, oneMonth);
        
        List<AssetInfo> listTwo = da.getAllCoverage(viewId, -1, "", sdf.format(getPreviousMonth(2)));
        Map<String, Pair<Integer, Integer>> twoMonth = processAssetList(listTwo);
        String keyTwoMonth = "ProcessMap_TwoMonth_" + viewId + "_" + subViewId + "_" +
                (country.equalsIgnoreCase("all") ? "all" : country) + "_" + dateStr;
        CacheService.getInstance().putInCache(keyTwoMonth, twoMonth);
    }
    
    public List<ViewInfo> getDataPerWeek(String type, String isNew) {
        String dateStr = sdf.format(radar.getDate1()).trim();
        String key = "DataPerWeek_" + type + "_" + isNew + "_" + viewId + "_" + subViewId + "_" +
                (country.equalsIgnoreCase("all") ? "all" : country) + "_" + viewText + "_" + dateStr;
        
        List<ViewInfo> cachedResult = CacheService.getInstance().getFromCache(key);
        if (cachedResult != null && !cachedResult.isEmpty()) {
            return cachedResult;
        }
        
        List<ViewInfo> data = da.getCoveragePerWeek(viewId, subViewId, 
                country.equalsIgnoreCase("all") ? "" : country, type, viewText, dateStr);
        CacheService.getInstance().putInCache(key, data);
        return data;
    }
    
    private Date getPreviousMonth(int months) {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        cal.add(java.util.Calendar.MONTH, -months);
        cal.set(java.util.Calendar.DAY_OF_MONTH, 1);
        return cal.getTime();
    }
    
    // ... additional controller methods ...
}
