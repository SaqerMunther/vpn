// src/main/java/com/example/demo/metrics/UserMetricsInterceptor.java
package com.example.demo.metrics;

import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.MeterRegistry;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.time.LocalDate;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class UserMetricsInterceptor implements HandlerInterceptor {
    private final MeterRegistry registry;
    private final ConcurrentHashMap<String, Boolean> seen = new ConcurrentHashMap<>();

    public UserMetricsInterceptor(MeterRegistry registry) {
        this.registry = registry;
    }

    @Override
    public boolean preHandle(HttpServletRequest request,
                             HttpServletResponse response,
                             Object handler) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth != null && auth.isAuthenticated()) {
            String userId = auth.getName();
            String key = userId + "-" + LocalDate.now();
            if (seen.putIfAbsent(key, Boolean.TRUE) == null) {
                Counter.builder("app.unique.users")
                       .description("Daily unique users")
                       .tag("date", LocalDate.now().toString())
                       .register(registry)
                       .increment();
            }
        }
        return true;
    }
}
