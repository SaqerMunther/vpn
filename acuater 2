// UniqueUserInterceptor.java
package com.example.demo.metrics;

import io.micrometer.core.instrument.Counter;
import io.micrometer.core.instrument.Gauge;
import io.micrometer.core.instrument.MeterRegistry;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

import javax.annotation.PostConstruct;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.time.Instant;
import java.time.LocalDate;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

/**
 * 1) Tracks daily uniques (ever-seen today).
 * 2) Tracks rolling uniques in the last 5 minutes.
 */
@Component
public class UniqueUserInterceptor implements HandlerInterceptor {

    private static final String COOKIE_NAME = "CLIENT_ID";

    private final MeterRegistry registry;
    // key = clientId + "-" + date  => for daily
    private final Set<String> dailySeen = ConcurrentHashMap.newKeySet();
    // map clientId -> lastSeenInstant  => for rolling 5m
    private final ConcurrentHashMap<String, Instant> lastSeenMap = new ConcurrentHashMap<>();

    public UniqueUserInterceptor(MeterRegistry registry) {
        this.registry = registry;
    }

    @PostConstruct
    public void initGauges() {
        // gauge for "so far today"
        Gauge.builder("app.unique.users.current", dailySeen, Set::size)
             .description("Current daily unique users")
             .register(registry);

        // gauge for "in the last 5 minutes"
        Gauge.builder("app.unique.users.last5", lastSeenMap, map -> {
            Instant cutoff = Instant.now().minusSeconds(5 * 60);
            return map.values().stream()
                      .filter(ts -> ts.isAfter(cutoff))
                      .count();
        })
        .description("Unique users seen in the last 5 minutes")
        .register(registry);
    }

    @Override
    public boolean preHandle(HttpServletRequest req,
                             HttpServletResponse res,
                             Object handler) {
        // 1) read or assign clientId cookie
        String clientId = null;
        if (req.getCookies() != null) {
            for (Cookie c : req.getCookies()) {
                if (COOKIE_NAME.equals(c.getName())) {
                    clientId = c.getValue();
                    break;
                }
            }
        }
        if (clientId == null) {
            clientId = UUID.randomUUID().toString();
            Cookie cookie = new Cookie(COOKIE_NAME, clientId);
            cookie.setPath("/");
            cookie.setHttpOnly(true);
            cookie.setMaxAge(60 * 60 * 24 * 365);
            res.addCookie(cookie);
        }

        // 2) daily unique
        String dailyKey = clientId + "-" + LocalDate.now();
        if (dailySeen.add(dailyKey)) {
            Counter.builder("app.unique.users.daily")
                   .description("Distinct users per day")
                   .tag("date", LocalDate.now().toString())
                   .register(registry)
                   .increment();
        }

        // 3) rolling unique
        lastSeenMap.put(clientId, Instant.now());

        return true;
    }

    /** purge daily set at midnight */
    @Scheduled(cron = "0 0 0 * * *")
    public void resetDaily() {
        dailySeen.clear();
    }

    /** purge old entries every minute */
    @Scheduled(fixedRate = 60_000)
    public void purgeRolling() {
        Instant cutoff = Instant.now().minusSeconds(5 * 60);
        lastSeenMap.entrySet().removeIf(e -> e.getValue().isBefore(cutoff));
    }
}











-------------------------------------


// src/main/java/com/example/demo/config/WebConfig.java
package com.example.demo.config;

import com.example.demo.metrics.UniqueUserInterceptor;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    private final UniqueUserInterceptor uniqueUserInterceptor;

    public WebConfig(UniqueUserInterceptor uniqueUserInterceptor) {
        this.uniqueUserInterceptor = uniqueUserInterceptor;
    }

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(uniqueUserInterceptor)
                .addPathPatterns("/api/**");   // adjust to your API paths
    }
}








----------------------------


<dependencies>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
  </dependency>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
  </dependency>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
  </dependency>
  <dependency>
    <groupId>io.micrometer</groupId>
    <artifactId>micrometer-registry-prometheus</artifactId>
  </dependency>
</dependencies>
