
package com.arabbank.hdf.graphdatafetcher.configuration;

import jakarta.persistence.*;
import org.springframework.context.annotation.*;
import org.springframework.core.env.*;
import org.springframework.jdbc.datasource.*;
import org.springframework.orm.jpa.*;
import org.springframework.transaction.*;
import org.springframework.transaction.annotation.*;

import javax.sql.*;
import java.util.*;

@Configuration
@EnableTransactionManagement
public abstract class OracleBaseConfig {

    protected final Environment environment;

    protected OracleBaseConfig(Environment environment) {
        this.environment = environment;
    }

    public abstract DataSource dataSource();

    public abstract LocalContainerEntityManagerFactoryBean entityManagerFactoryBean();

    @Bean({"oracleFirstTransactionManager", "oracleSecondTransactionManager"})
    public abstract PlatformTransactionManager transactionManager(EntityManagerFactory entityManagerFactory);

    protected DriverManagerDataSource buildDataSource(String url, String username, String password, String driverClassName) {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setUrl(url);
        dataSource.setUsername(username);
        dataSource.setPassword(password);
        dataSource.setDriverClassName(driverClassName);
        return dataSource;
    }

    protected Map<String, Object> buildJpaProperties(String connectionTimeout, String maxPoolSize, String schema) {
        Map<String, Object> properties = new HashMap<>();
        properties.put("hikari.connection-timeout", connectionTimeout);
        properties.put("hikari.maximum-pool-size", maxPoolSize);
        if (schema != null) {
            properties.put("hibernate.default_schema", schema);
        }
        return properties;
    }

}

package com.arabbank.hdf.graphdatafetcher.configuration;

import jakarta.persistence.*;
import org.springframework.beans.factory.annotation.*;
import org.springframework.context.annotation.*;
import org.springframework.core.env.*;
import org.springframework.data.jpa.repository.config.*;
import org.springframework.jdbc.core.namedparam.*;
import org.springframework.orm.jpa.*;
import org.springframework.orm.jpa.vendor.*;
import org.springframework.transaction.*;

import javax.sql.*;

@Configuration
@EnableJpaRepositories (
        entityManagerFactoryRef = "sqlServerEntityManagerFactory",
        basePackages = {"com.arabbank.hdf.graphdatafetcher.repository.sqlserver"},
        transactionManagerRef = "sqlServerTransactionManager"
)
public class SqlServerConfig extends OracleBaseConfig {

    public SqlServerConfig(Environment environment) {
        super(environment);
    }

    @Bean("sqlServerDataSource")
    @Override
    public DataSource dataSource() {
        return buildDataSource(
                environment.getProperty("spring.datasource.sqlserver.url"),
                environment.getProperty("spring.datasource.sqlserver.username"),
                environment.getProperty("spring.datasource.sqlserver.password"),
                environment.getProperty("spring.datasource.sqlserver.driver-class-name")
        );
    }

    @Bean("sqlServerEntityManagerFactory")
    @Override
    public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean() {
        LocalContainerEntityManagerFactoryBean bean = new LocalContainerEntityManagerFactoryBean();
        bean.setDataSource(dataSource());
        JpaVendorAdapter jpaVendorAdapter = new HibernateJpaVendorAdapter();
        bean.setJpaVendorAdapter(jpaVendorAdapter);
        bean.setJpaPropertyMap(buildJpaProperties(
                environment.getProperty("spring.datasource.sqlserver.hikari.connection-timeout"),
                environment.getProperty("spring.datasource.sqlserver.hikari.maximum-pool-size"),
                environment.getProperty("spring.datasource.sqlserver.schema")
        ));
        bean.setPackagesToScan("com.arabbank.hdf.graphdatafetcher.model.entity.sqlserver");
        return bean;
    }

    @Bean("sqlServerTransactionManager")
    @Override
    public PlatformTransactionManager transactionManager(@Qualifier("sqlServerEntityManagerFactory") EntityManagerFactory entityManagerFactory) {
        return new JpaTransactionManager(entityManagerFactory);
    }

    @Bean("sqlServerNamedParameterJdbcTemplate")
    public NamedParameterJdbcTemplate sqlServerNamedParameterJdbcTemplate(@Qualifier("sqlServerDataSource") DataSource dataSource) {
        return new NamedParameterJdbcTemplate(dataSource);
    }
}












---------------------------------



spring:
  profiles:
    default: dev # For production environment will be handel it using '-Dspring.profiles.active=<environment-name>'
  datasource:
    oracle:
      first:
        url: jdbc:oracle:thin:@${oracle-db.first.ip}:${oracle-db.first.port}:${oracle-db.first.service-name}
        username: ${oracle-db.first.username}
        password: ${oracle-db.first.password}
        driver-class-name: oracle.jdbc.driver.OracleDriver
        hikari:
          connection-timeout: 20000
          maximum-pool-size: 5
      second:
        url: jdbc:oracle:thin:@${oracle-db.second.ip}:${oracle-db.second.port}:${oracle-db.second.service-name}
        username: ${oracle-db.second.username}
        password: ${oracle-db.second.password}
        driver-class-name: oracle.jdbc.driver.OracleDriver
        hibernate:
          default_schema: ATMUSER
        hikari:
          connection-timeout: 20000
          maximum-pool-size: 5
    sqlserver:
      url: jdbc:sqlserver://${sqlserver.ip}:${sqlserver.port};databaseName=${sqlserver.service-name};trustServerCertificate=true
      username: ${sqlserver.username}
      password: ${sqlserver.password}
      driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver
      schema: dbo
      hikari:
        connection-timeout: 20000
        maximum-pool-size: 10
  main:
    allow-bean-definition-overriding: true

  kafka:
    bootstrap-servers: ${kafka.socket}
    properties:
      ssl:
        truststore:
          location: ${KAFKA_TRUSTSTORE_PATH}
          password: ${TRUSTSTORE_PASSWORD:changeit}
          type: JKS
      sasl:
        mechanism: SCRAM-SHA-512
        jaas:
          config: org.apache.kafka.common.security.scram.ScramLoginModule required username="${KAFKA_USERNAME:CMON-SCRAM-USER}"  password="${KAFKA_PASSWORD:CMON1234}";
      security:
        protocol: SASL_SSL
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        max.block.ms: 10000 #milliseconds
management:
  endpoints:
    web:
      exposure:
        exclude: health
app:
  kvstore:
    file-path: ${KV_PATH:classpath:kvstore.properties}
    keys:
      time-fetching: time-fetching
  utc:
    offset: 3
  kafka:
    topic:
      latency: ${LATENCY_TOPIC:cmon-mobile.latency_data}
      transaction: ${TRANSACTION_TOPIC:cmon-mobile.transaction_data}
      end-of-day: ${END_OF_DAY_TOPIC:cmon-mobile.end_of_day_data}
      readiness-topic: ${KAFKA_READINESS_TOPIC:cmon-mobile.client_service.user_actions}
      user-data: ${USER_DATA_TOPIC:cmon-mobile.user_data}
    schedule:
      users:
        repeat-every-ms: 21600000 #6 hours in milliseconds
      graph:
        repeat-every-ms: 30000 #milliseconds
      fetching-before-ms: 30000 #milliseconds


----------------------------









Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-30 11:18:35 - [main] - [] - ERROR o.s.boot.SpringApplication.reportFailure - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlServerEntityManagerFactory' defined in class path resource [com/arabbank/hdf/graphdatafetcher/configuration/SqlServerConfig.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1786)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
        at com.arabbank.hdf.graphdatafetcher.GraphDataFetcherApplication.main(GraphDataFetcherApplication.java:14)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:568)
        at org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:91)
        at org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:53)
        at org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:58)
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
        at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:276)
        at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
        at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
        at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
        at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
        at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
        at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
        at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
        at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
        at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
        at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
        at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
        at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
        ... 23 common frames omitted
Caused by: org.hibernate.HibernateException: Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
        at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.determineDialect(DialectFactoryImpl.java:191)
        at org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl.buildDialect(DialectFactoryImpl.java:87)
        at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentWithDefaults(JdbcEnvironmentInitiator.java:143)
        at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:348)
        at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
        at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
        at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:130)
        at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
        ... 38 common frames omitted



-----------------------------------------------



@Bean("sqlServerEntityManagerFactory")
@Override
public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean() {
    LocalContainerEntityManagerFactoryBean emf = new LocalContainerEntityManagerFactoryBean();
    emf.setDataSource(dataSource());

    // 1) Tell Hibernate which dialect to use
    HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
    vendorAdapter.setDatabasePlatform("org.hibernate.dialect.SQLServer2012Dialect");
    emf.setJpaVendorAdapter(vendorAdapter);

    // 2) (Optional) explicitly expose the JDBC URL so Hibernate can 
    //    fallback to metadata if it really wants to
    Map<String,Object> props = buildJpaProperties(
        environment.getProperty("spring.datasource.sqlserver.hikari.connection-timeout"),
        environment.getProperty("spring.datasource.sqlserver.hikari.maximum-pool-size"),
        environment.getProperty("spring.datasource.sqlserver.schema")
    );
    props.put("jakarta.persistence.jdbc.url", 
              environment.getProperty("spring.datasource.sqlserver.url"));
    props.put("hibernate.dialect", 
              "org.hibernate.dialect.SQLServer2012Dialect");
    emf.setJpaPropertyMap(props);

    emf.setPackagesToScan("com.arabbank.hdf.graphdatafetcher.model.entity.sqlserver");
    return emf;
}





-------------


spring:
  jpa:
    hibernate:
      ddl-auto: none        # or validate / update / create-drop as appropriate
    database-platform: org.hibernate.dialect.SQLServer2012Dialect














-----------------


package com.arabbank.hdf.graphdatafetcher.configuration;

import jakarta.persistence.EntityManagerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.*;
import org.springframework.core.env.Environment;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.orm.jpa.*;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;

import javax.sql.DataSource;
import java.util.Map;

@Configuration
@EnableJpaRepositories(
    entityManagerFactoryRef   = "sqlServerEntityManagerFactory",
    basePackages              = "com.arabbank.hdf.graphdatafetcher.repository.sqlserver",
    transactionManagerRef     = "sqlServerTransactionManager"
)
public class SqlServerConfig extends OracleBaseConfig {

    public SqlServerConfig(Environment environment) {
        super(environment);
    }

    @Bean("sqlServerDataSource")
    @Override
    public DataSource dataSource() {
        return buildDataSource(
            environment.getProperty("spring.datasource.sqlserver.url"),
            environment.getProperty("spring.datasource.sqlserver.username"),
            environment.getProperty("spring.datasource.sqlserver.password"),
            environment.getProperty("spring.datasource.sqlserver.driver-class-name")
        );
    }

    @Bean("sqlServerEntityManagerFactory")
    @Override
    public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean() {
        LocalContainerEntityManagerFactoryBean emf = new LocalContainerEntityManagerFactoryBean();
        emf.setDataSource(dataSource());

        // 1) Tell Hibernate exactly which dialect to use
        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
        vendorAdapter.setDatabasePlatform("org.hibernate.dialect.SQLServer2012Dialect");
        emf.setJpaVendorAdapter(vendorAdapter);

        // 2) Build your common JPA properties and then expose URL + dialect
        Map<String, Object> props = buildJpaProperties(
            environment.getProperty("spring.datasource.sqlserver.hikari.connection-timeout"),
            environment.getProperty("spring.datasource.sqlserver.hikari.maximum-pool-size"),
            environment.getProperty("spring.datasource.sqlserver.schema")
        );
        props.put("jakarta.persistence.jdbc.url",
                  environment.getProperty("spring.datasource.sqlserver.url"));
        props.put("hibernate.dialect",
                  "org.hibernate.dialect.SQLServer2012Dialect");

        emf.setJpaPropertyMap(props);

        emf.setPackagesToScan("com.arabbank.hdf.graphdatafetcher.model.entity.sqlserver");
        return emf;
    }

    @Bean("sqlServerTransactionManager")
    @Override
    public PlatformTransactionManager transactionManager(
            @Qualifier("sqlServerEntityManagerFactory") EntityManagerFactory emf
    ) {
        return new JpaTransactionManager(emf);
    }

    @Bean("sqlServerNamedParameterJdbcTemplate")
    public NamedParameterJdbcTemplate sqlServerNamedParameterJdbcTemplate(
            @Qualifier("sqlServerDataSource") DataSource ds
    ) {
        return new NamedParameterJdbcTemplate(ds);
    }
}


-------------------------

spring:
  profiles:
    default: dev

  # --- CENTRALIZED JPA / HIBERNATE SETTINGS ---
  jpa:
    hibernate:
      ddl-auto: none                # or: validate / update / create-drop
    database-platform: org.hibernate.dialect.SQLServer2012Dialect

  datasource:
    oracle:
      first:
        url: jdbc:oracle:thin:@${oracle-db.first.ip}:${oracle-db.first.port}:${oracle-db.first.service-name}
        username: ${oracle-db.first.username}
        password: ${oracle-db.first.password}
        driver-class-name: oracle.jdbc.driver.OracleDriver
        hikari:
          connection-timeout: 20000
          maximum-pool-size: 5
      second:
        url: jdbc:oracle:thin:@${oracle-db.second.ip}:${oracle-db.second.port}:${oracle-db.second.service-name}
        username: ${oracle-db.second.username}
        password: ${oracle-db.second.password}
        driver-class-name: oracle.jdbc.driver.OracleDriver
        hibernate:
          default_schema: ATMUSER
        hikari:
          connection-timeout: 20000
          maximum-pool-size: 5


----------------

Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: Login failed for user ''. ClientConnectionId:6fcb0bc0-3a10-4e1f-83b9-fda91e5ee9ff
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:259)
	at com.microsoft.sqlserver.jdbc.TDSTokenHandler.onEOF(tdsparser.java:304)
	at com.microsoft.sqlserver.jdbc.TDSParser.parse(tdsparser.java:137)
	at com.microsoft.sqlserver.jdbc.TDSParser.parse(tdsparser.java:42)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.sendLogon(SQLServerConnection.java:6612)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.logon(SQLServerConnection.java:5154)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection$LogonCommand.doExecute(SQLServerConnection.java:5087)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7675)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:4137)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectHelper(SQLServerConnection.java:3583)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.login(SQLServerConnection.java:3172)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectInternal(SQLServerConnection.java:3014)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.connect(SQLServerConnection.java:1836)
	at com.microsoft.sqlserver.jdbc.SQLServerDriver.connect(SQLServerDriver.java:1246)
	at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)
	at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:190)
	at org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionCreator.makeConnection(DriverManagerConnectionCreator.java:36)
	... 46 common frames omitted
    sqlserver:
      url: jdbc:sqlserver://${sqlserver.ip}:${sqlserver.port};databaseName=${sqlserver.service-name};trustServerCertificate=true
      username: ${sqlserver.username}
      password: ${sqlserver.password}
      driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver
      schema: dbo
      hikari:
        connection-timeout: 20000
        maximum-pool-size: 10

  main:
    allow-bean-definition-overriding: true

  kafka:
    bootstrap-servers: ${kafka.socket}
    properties:
      ssl:
        truststore:
          location: ${KAFKA_TRUSTSTORE_PATH}
          password: ${TRUSTSTORE_PASSWORD:changeit}
          type: JKS
      sasl:
        mechanism: SCRAM-SHA-512
        jaas:
          config: org.apache.kafka.common.security.scram.ScramLoginModule required username="${KAFKA_USERNAME:CMON-SCRAM-USER}"  password="${KAFKA_PASSWORD:CMON1234}";
      security:
        protocol: SASL_SSL
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        max.block.ms: 10000

management:
  endpoints:
    web:
      exposure:
        exclude: health

app:
  kvstore:
    file-path: ${KV_PATH:classpath:kvstore.properties}
    keys:
      time-fetching: time-fetching
  utc:
    offset: 3
  kafka:
    topic:
      latency: ${LATENCY_TOPIC:cmon-mobile.latency_data}
      transaction: ${TRANSACTION_TOPIC:cmon-mobile.transaction_data}
      end-of-day: ${END_OF_DAY_TOPIC:cmon-mobile.end_of_day_data}
      readiness-topic: ${KAFKA_READINESS_TOPIC:cmon-mobile.client_service.user_actions}
      user-data: ${USER_DATA_TOPIC:cmon-mobile.user_data}
    schedule:
      users:
        repeat-every-ms: 21600000
      graph:
        repeat-every-ms: 30000
      fetching-before-ms: 30000
-------------------------------




Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-07-01 11:29:19 - [main] - [] - ERROR o.s.boot.SpringApplication.reportFailure - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlServerEntityManagerFactory' defined in class path resource [com/arabbank/hdf/graphdatafetcher/configuration/SqlServerConfig.class]: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Error calling DriverManager#getConnection [null]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1786)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1234)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at com.arabbank.hdf.graphdatafetcher.GraphDataFetcherApplication.main(GraphDataFetcherApplication.java:14)
Caused by: org.hibernate.service.spi.ServiceException: Unable to create requested service [org.hibernate.engine.jdbc.env.spi.JdbcEnvironment] due to: Error calling DriverManager#getConnection [null]
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:276)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:223)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:191)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:170)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1432)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1503)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1833)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	... 16 common frames omitted
Caused by: org.hibernate.exception.SQLGrammarException: Error calling DriverManager#getConnection [null]
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:91)
	at org.hibernate.engine.jdbc.connections.internal.BasicConnectionCreator$1.convert(BasicConnectionCreator.java:118)
	at org.hibernate.engine.jdbc.connections.internal.BasicConnectionCreator.convertSqlException(BasicConnectionCreator.java:143)
	at org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionCreator.makeConnection(DriverManagerConnectionCreator.java:39)
	at org.hibernate.engine.jdbc.connections.internal.BasicConnectionCreator.createConnection(BasicConnectionCreator.java:61)
	at org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections.addConnections(DriverManagerConnectionProviderImpl.java:499)
	at org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections.<init>(DriverManagerConnectionProviderImpl.java:372)
	at org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections$Builder.build(DriverManagerConnectionProviderImpl.java:550)
	at org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl.buildPool(DriverManagerConnectionProviderImpl.java:102)
	at org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl.configure(DriverManagerConnectionProviderImpl.java:82)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.configureService(StandardServiceRegistryImpl.java:136)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:247)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.buildJdbcConnectionAccess(JdbcEnvironmentInitiator.java:395)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:262)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:107)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:130)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	... 31 common frames omitted
Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: Login failed for user ''. ClientConnectionId:6fcb0bc0-3a10-4e1f-83b9-fda91e5ee9ff
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:259)
	at com.microsoft.sqlserver.jdbc.TDSTokenHandler.onEOF(tdsparser.java:304)
	at com.microsoft.sqlserver.jdbc.TDSParser.parse(tdsparser.java:137)
	at com.microsoft.sqlserver.jdbc.TDSParser.parse(tdsparser.java:42)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.sendLogon(SQLServerConnection.java:6612)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.logon(SQLServerConnection.java:5154)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection$LogonCommand.doExecute(SQLServerConnection.java:5087)
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7675)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:4137)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectHelper(SQLServerConnection.java:3583)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.login(SQLServerConnection.java:3172)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectInternal(SQLServerConnection.java:3014)
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.connect(SQLServerConnection.java:1836)
	at com.microsoft.sqlserver.jdbc.SQLServerDriver.connect(SQLServerDriver.java:1246)
	at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)
	at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:190)
	at org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionCreator.makeConnection(DriverManagerConnectionCreator.java:36)
	... 46 common frames omitted
